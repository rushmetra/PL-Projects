Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Gramatica
Rule 1     Gramatica -> Lex
Rule 2     Lex -> % % PAL List Defs
Rule 3     List -> Literals Ignore Tokens
Rule 4     Literals -> % PAL = SIMB
Rule 5     Ignore -> % PAL = SIMB
Rule 6     Tokens -> % PAL = ListTokens
Rule 7     ListTokens -> [ TOKEN ListTokens ]
Rule 8     ListTokens -> , TOKEN
Rule 9     ListTokens -> <empty>
Rule 10    Defs -> Def Defs
Rule 11    Defs -> <empty>
Rule 12    Def -> SIMB PAL { TOKEN , PAL }
Rule 13    Erro -> .

Terminals, with rules where they appear

%                    : 2 2 4 5 6
,                    : 8 12
.                    : 13
=                    : 4 5 6
PAL                  : 2 4 5 6 12 12
SIMB                 : 4 5 12
TOKEN                : 7 8 12
[                    : 7
]                    : 7
error                : 
{                    : 12
}                    : 12

Nonterminals, with rules where they appear

Def                  : 10
Defs                 : 2 10
Erro                 : 
Gramatica            : 0
Ignore               : 3
Lex                  : 1
List                 : 2
ListTokens           : 6 7
Literals             : 3
Tokens               : 3

Parsing method: LALR

state 0

    (0) S' -> . Gramatica
    (1) Gramatica -> . Lex
    (2) Lex -> . % % PAL List Defs

    %               shift and go to state 3

    Gramatica                      shift and go to state 1
    Lex                            shift and go to state 2

state 1

    (0) S' -> Gramatica .



state 2

    (1) Gramatica -> Lex .

    $end            reduce using rule 1 (Gramatica -> Lex .)


state 3

    (2) Lex -> % . % PAL List Defs

    %               shift and go to state 4


state 4

    (2) Lex -> % % . PAL List Defs

    PAL             shift and go to state 5


state 5

    (2) Lex -> % % PAL . List Defs
    (3) List -> . Literals Ignore Tokens
    (4) Literals -> . % PAL = SIMB

    %               shift and go to state 6

    List                           shift and go to state 7
    Literals                       shift and go to state 8

state 6

    (4) Literals -> % . PAL = SIMB

    PAL             shift and go to state 9


state 7

    (2) Lex -> % % PAL List . Defs
    (10) Defs -> . Def Defs
    (11) Defs -> .
    (12) Def -> . SIMB PAL { TOKEN , PAL }

    $end            reduce using rule 11 (Defs -> .)
    SIMB            shift and go to state 12

    Defs                           shift and go to state 10
    Def                            shift and go to state 11

state 8

    (3) List -> Literals . Ignore Tokens
    (5) Ignore -> . % PAL = SIMB

    %               shift and go to state 14

    Ignore                         shift and go to state 13

state 9

    (4) Literals -> % PAL . = SIMB

    =               shift and go to state 15


state 10

    (2) Lex -> % % PAL List Defs .

    $end            reduce using rule 2 (Lex -> % % PAL List Defs .)


state 11

    (10) Defs -> Def . Defs
    (10) Defs -> . Def Defs
    (11) Defs -> .
    (12) Def -> . SIMB PAL { TOKEN , PAL }

    $end            reduce using rule 11 (Defs -> .)
    SIMB            shift and go to state 12

    Def                            shift and go to state 11
    Defs                           shift and go to state 16

state 12

    (12) Def -> SIMB . PAL { TOKEN , PAL }

    PAL             shift and go to state 17


state 13

    (3) List -> Literals Ignore . Tokens
    (6) Tokens -> . % PAL = ListTokens

    %               shift and go to state 19

    Tokens                         shift and go to state 18

state 14

    (5) Ignore -> % . PAL = SIMB

    PAL             shift and go to state 20


state 15

    (4) Literals -> % PAL = . SIMB

    SIMB            shift and go to state 21


state 16

    (10) Defs -> Def Defs .

    $end            reduce using rule 10 (Defs -> Def Defs .)


state 17

    (12) Def -> SIMB PAL . { TOKEN , PAL }

    {               shift and go to state 22


state 18

    (3) List -> Literals Ignore Tokens .

    SIMB            reduce using rule 3 (List -> Literals Ignore Tokens .)
    $end            reduce using rule 3 (List -> Literals Ignore Tokens .)


state 19

    (6) Tokens -> % . PAL = ListTokens

    PAL             shift and go to state 23


state 20

    (5) Ignore -> % PAL . = SIMB

    =               shift and go to state 24


state 21

    (4) Literals -> % PAL = SIMB .

    %               reduce using rule 4 (Literals -> % PAL = SIMB .)


state 22

    (12) Def -> SIMB PAL { . TOKEN , PAL }

    TOKEN           shift and go to state 25


state 23

    (6) Tokens -> % PAL . = ListTokens

    =               shift and go to state 26


state 24

    (5) Ignore -> % PAL = . SIMB

    SIMB            shift and go to state 27


state 25

    (12) Def -> SIMB PAL { TOKEN . , PAL }

    ,               shift and go to state 28


state 26

    (6) Tokens -> % PAL = . ListTokens
    (7) ListTokens -> . [ TOKEN ListTokens ]
    (8) ListTokens -> . , TOKEN
    (9) ListTokens -> .

    [               shift and go to state 30
    ,               shift and go to state 31
    SIMB            reduce using rule 9 (ListTokens -> .)
    $end            reduce using rule 9 (ListTokens -> .)

    ListTokens                     shift and go to state 29

state 27

    (5) Ignore -> % PAL = SIMB .

    %               reduce using rule 5 (Ignore -> % PAL = SIMB .)


state 28

    (12) Def -> SIMB PAL { TOKEN , . PAL }

    PAL             shift and go to state 32


state 29

    (6) Tokens -> % PAL = ListTokens .

    SIMB            reduce using rule 6 (Tokens -> % PAL = ListTokens .)
    $end            reduce using rule 6 (Tokens -> % PAL = ListTokens .)


state 30

    (7) ListTokens -> [ . TOKEN ListTokens ]

    TOKEN           shift and go to state 33


state 31

    (8) ListTokens -> , . TOKEN

    TOKEN           shift and go to state 34


state 32

    (12) Def -> SIMB PAL { TOKEN , PAL . }

    }               shift and go to state 35


state 33

    (7) ListTokens -> [ TOKEN . ListTokens ]
    (7) ListTokens -> . [ TOKEN ListTokens ]
    (8) ListTokens -> . , TOKEN
    (9) ListTokens -> .

    [               shift and go to state 30
    ,               shift and go to state 31
    ]               reduce using rule 9 (ListTokens -> .)

    ListTokens                     shift and go to state 36

state 34

    (8) ListTokens -> , TOKEN .

    SIMB            reduce using rule 8 (ListTokens -> , TOKEN .)
    $end            reduce using rule 8 (ListTokens -> , TOKEN .)
    ]               reduce using rule 8 (ListTokens -> , TOKEN .)


state 35

    (12) Def -> SIMB PAL { TOKEN , PAL } .

    SIMB            reduce using rule 12 (Def -> SIMB PAL { TOKEN , PAL } .)
    $end            reduce using rule 12 (Def -> SIMB PAL { TOKEN , PAL } .)


state 36

    (7) ListTokens -> [ TOKEN ListTokens . ]

    ]               shift and go to state 37


state 37

    (7) ListTokens -> [ TOKEN ListTokens ] .

    SIMB            reduce using rule 7 (ListTokens -> [ TOKEN ListTokens ] .)
    $end            reduce using rule 7 (ListTokens -> [ TOKEN ListTokens ] .)
    ]               reduce using rule 7 (ListTokens -> [ TOKEN ListTokens ] .)

