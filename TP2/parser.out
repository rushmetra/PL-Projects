Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Gramatica
Rule 1     Gramatica -> Lex Yacc
Rule 2     Lex -> % % PAL List Defs Erro
Rule 3     List -> Literals Ignore Tokens
Rule 4     Literals -> % PAL = SIMB
Rule 5     Ignore -> % PAL = SIMB
Rule 6     Tokens -> % PAL = ListTokens
Rule 7     ListTokens -> [ TOKEN ListTokens ]
Rule 8     ListTokens -> , TOKEN
Rule 9     ListTokens -> <empty>
Rule 10    Defs -> Def Defs
Rule 11    Defs -> <empty>
Rule 12    Def -> SIMB PAL { TOKEN , PAL Fim }
Rule 13    Erro -> - PAL SIMB , PAL Fim )
Rule 14    Yacc -> % % PAL Precedence Gramar Code
Rule 15    Precedence -> % PAL = [ ListPrecedence ]
Rule 16    ListPrecedence -> PRECEDENCE , ListPrecedence
Rule 17    ListPrecedence -> <empty>
Rule 18    Gramar -> Productions Gramar
Rule 19    Gramar -> <empty>
Rule 20    Productions -> PAL : Exp { Id }
Rule 21    Exp -> PAL Exp
Rule 22    Exp -> TOKEN Exp
Rule 23    Exp -> % PAL Exp
Rule 24    Exp -> <empty>
Rule 25    Id -> Atr Math ListAtr Fim
Rule 26    Atr -> PAL [ Atr ]
Rule 27    Atr -> PAL
Rule 28    ListAtr -> Atr Math ListAtr
Rule 29    ListAtr -> <empty>
Rule 30    Fim -> )
Rule 31    Fim -> <empty>
Rule 32    Math -> =
Rule 33    Math -> +
Rule 34    Math -> -
Rule 35    Math -> *
Rule 36    Math -> /
Rule 37    Math -> _
Rule 38    Math -> = +
Rule 39    Math -> = -
Rule 40    Math -> <empty>
Rule 41    Code -> % % ListDefsCode
Rule 42    ListDefsCode -> DefsCode ListDefsCode
Rule 43    ListDefsCode -> <empty>
Rule 44    DefsCode -> PAL PAL Fim :

Terminals, with rules where they appear

%                    : 2 2 4 5 6 14 14 15 23 41 41
)                    : 13 30
*                    : 35
+                    : 33 38
,                    : 8 12 13 16
-                    : 13 34 39
/                    : 36
:                    : 20 44
=                    : 4 5 6 15 32 38 39
PAL                  : 2 4 5 6 12 12 13 13 14 15 20 21 23 26 27 44 44
PRECEDENCE           : 16
SIMB                 : 4 5 12 13
TOKEN                : 7 8 12 22
[                    : 7 15 26
]                    : 7 15 26
_                    : 37
error                : 
{                    : 12 20
}                    : 12 20

Nonterminals, with rules where they appear

Atr                  : 25 26 28
Code                 : 14
Def                  : 10
Defs                 : 2 10
DefsCode             : 42
Erro                 : 2
Exp                  : 20 21 22 23
Fim                  : 12 13 25 44
Gramar               : 14 18
Gramatica            : 0
Id                   : 20
Ignore               : 3
Lex                  : 1
List                 : 2
ListAtr              : 25 28
ListDefsCode         : 41 42
ListPrecedence       : 15 16
ListTokens           : 6 7
Literals             : 3
Math                 : 25 28
Precedence           : 14
Productions          : 18
Tokens               : 3
Yacc                 : 1

Parsing method: LALR

state 0

    (0) S' -> . Gramatica
    (1) Gramatica -> . Lex Yacc
    (2) Lex -> . % % PAL List Defs Erro

    %               shift and go to state 3

    Gramatica                      shift and go to state 1
    Lex                            shift and go to state 2

state 1

    (0) S' -> Gramatica .



state 2

    (1) Gramatica -> Lex . Yacc
    (14) Yacc -> . % % PAL Precedence Gramar Code

    %               shift and go to state 5

    Yacc                           shift and go to state 4

state 3

    (2) Lex -> % . % PAL List Defs Erro

    %               shift and go to state 6


state 4

    (1) Gramatica -> Lex Yacc .

    $end            reduce using rule 1 (Gramatica -> Lex Yacc .)


state 5

    (14) Yacc -> % . % PAL Precedence Gramar Code

    %               shift and go to state 7


state 6

    (2) Lex -> % % . PAL List Defs Erro

    PAL             shift and go to state 8


state 7

    (14) Yacc -> % % . PAL Precedence Gramar Code

    PAL             shift and go to state 9


state 8

    (2) Lex -> % % PAL . List Defs Erro
    (3) List -> . Literals Ignore Tokens
    (4) Literals -> . % PAL = SIMB

    %               shift and go to state 10

    List                           shift and go to state 11
    Literals                       shift and go to state 12

state 9

    (14) Yacc -> % % PAL . Precedence Gramar Code
    (15) Precedence -> . % PAL = [ ListPrecedence ]

    %               shift and go to state 13

    Precedence                     shift and go to state 14

state 10

    (4) Literals -> % . PAL = SIMB

    PAL             shift and go to state 15


state 11

    (2) Lex -> % % PAL List . Defs Erro
    (10) Defs -> . Def Defs
    (11) Defs -> .
    (12) Def -> . SIMB PAL { TOKEN , PAL Fim }

    -               reduce using rule 11 (Defs -> .)
    SIMB            shift and go to state 18

    Defs                           shift and go to state 16
    Def                            shift and go to state 17

state 12

    (3) List -> Literals . Ignore Tokens
    (5) Ignore -> . % PAL = SIMB

    %               shift and go to state 20

    Ignore                         shift and go to state 19

state 13

    (15) Precedence -> % . PAL = [ ListPrecedence ]

    PAL             shift and go to state 21


state 14

    (14) Yacc -> % % PAL Precedence . Gramar Code
    (18) Gramar -> . Productions Gramar
    (19) Gramar -> .
    (20) Productions -> . PAL : Exp { Id }

    %               reduce using rule 19 (Gramar -> .)
    PAL             shift and go to state 22

    Gramar                         shift and go to state 23
    Productions                    shift and go to state 24

state 15

    (4) Literals -> % PAL . = SIMB

    =               shift and go to state 25


state 16

    (2) Lex -> % % PAL List Defs . Erro
    (13) Erro -> . - PAL SIMB , PAL Fim )

    -               shift and go to state 27

    Erro                           shift and go to state 26

state 17

    (10) Defs -> Def . Defs
    (10) Defs -> . Def Defs
    (11) Defs -> .
    (12) Def -> . SIMB PAL { TOKEN , PAL Fim }

    -               reduce using rule 11 (Defs -> .)
    SIMB            shift and go to state 18

    Def                            shift and go to state 17
    Defs                           shift and go to state 28

state 18

    (12) Def -> SIMB . PAL { TOKEN , PAL Fim }

    PAL             shift and go to state 29


state 19

    (3) List -> Literals Ignore . Tokens
    (6) Tokens -> . % PAL = ListTokens

    %               shift and go to state 31

    Tokens                         shift and go to state 30

state 20

    (5) Ignore -> % . PAL = SIMB

    PAL             shift and go to state 32


state 21

    (15) Precedence -> % PAL . = [ ListPrecedence ]

    =               shift and go to state 33


state 22

    (20) Productions -> PAL . : Exp { Id }

    :               shift and go to state 34


state 23

    (14) Yacc -> % % PAL Precedence Gramar . Code
    (41) Code -> . % % ListDefsCode

    %               shift and go to state 35

    Code                           shift and go to state 36

state 24

    (18) Gramar -> Productions . Gramar
    (18) Gramar -> . Productions Gramar
    (19) Gramar -> .
    (20) Productions -> . PAL : Exp { Id }

    %               reduce using rule 19 (Gramar -> .)
    PAL             shift and go to state 22

    Productions                    shift and go to state 24
    Gramar                         shift and go to state 37

state 25

    (4) Literals -> % PAL = . SIMB

    SIMB            shift and go to state 38


state 26

    (2) Lex -> % % PAL List Defs Erro .

    %               reduce using rule 2 (Lex -> % % PAL List Defs Erro .)


state 27

    (13) Erro -> - . PAL SIMB , PAL Fim )

    PAL             shift and go to state 39


state 28

    (10) Defs -> Def Defs .

    -               reduce using rule 10 (Defs -> Def Defs .)


state 29

    (12) Def -> SIMB PAL . { TOKEN , PAL Fim }

    {               shift and go to state 40


state 30

    (3) List -> Literals Ignore Tokens .

    SIMB            reduce using rule 3 (List -> Literals Ignore Tokens .)
    -               reduce using rule 3 (List -> Literals Ignore Tokens .)


state 31

    (6) Tokens -> % . PAL = ListTokens

    PAL             shift and go to state 41


state 32

    (5) Ignore -> % PAL . = SIMB

    =               shift and go to state 42


state 33

    (15) Precedence -> % PAL = . [ ListPrecedence ]

    [               shift and go to state 43


state 34

    (20) Productions -> PAL : . Exp { Id }
    (21) Exp -> . PAL Exp
    (22) Exp -> . TOKEN Exp
    (23) Exp -> . % PAL Exp
    (24) Exp -> .

    PAL             shift and go to state 44
    TOKEN           shift and go to state 46
    %               shift and go to state 47
    {               reduce using rule 24 (Exp -> .)

    Exp                            shift and go to state 45

state 35

    (41) Code -> % . % ListDefsCode

    %               shift and go to state 48


state 36

    (14) Yacc -> % % PAL Precedence Gramar Code .

    $end            reduce using rule 14 (Yacc -> % % PAL Precedence Gramar Code .)


state 37

    (18) Gramar -> Productions Gramar .

    %               reduce using rule 18 (Gramar -> Productions Gramar .)


state 38

    (4) Literals -> % PAL = SIMB .

    %               reduce using rule 4 (Literals -> % PAL = SIMB .)


state 39

    (13) Erro -> - PAL . SIMB , PAL Fim )

    SIMB            shift and go to state 49


state 40

    (12) Def -> SIMB PAL { . TOKEN , PAL Fim }

    TOKEN           shift and go to state 50


state 41

    (6) Tokens -> % PAL . = ListTokens

    =               shift and go to state 51


state 42

    (5) Ignore -> % PAL = . SIMB

    SIMB            shift and go to state 52


state 43

    (15) Precedence -> % PAL = [ . ListPrecedence ]
    (16) ListPrecedence -> . PRECEDENCE , ListPrecedence
    (17) ListPrecedence -> .

    PRECEDENCE      shift and go to state 54
    ]               reduce using rule 17 (ListPrecedence -> .)

    ListPrecedence                 shift and go to state 53

state 44

    (21) Exp -> PAL . Exp
    (21) Exp -> . PAL Exp
    (22) Exp -> . TOKEN Exp
    (23) Exp -> . % PAL Exp
    (24) Exp -> .

    PAL             shift and go to state 44
    TOKEN           shift and go to state 46
    %               shift and go to state 47
    {               reduce using rule 24 (Exp -> .)

    Exp                            shift and go to state 55

state 45

    (20) Productions -> PAL : Exp . { Id }

    {               shift and go to state 56


state 46

    (22) Exp -> TOKEN . Exp
    (21) Exp -> . PAL Exp
    (22) Exp -> . TOKEN Exp
    (23) Exp -> . % PAL Exp
    (24) Exp -> .

    PAL             shift and go to state 44
    TOKEN           shift and go to state 46
    %               shift and go to state 47
    {               reduce using rule 24 (Exp -> .)

    Exp                            shift and go to state 57

state 47

    (23) Exp -> % . PAL Exp

    PAL             shift and go to state 58


state 48

    (41) Code -> % % . ListDefsCode
    (42) ListDefsCode -> . DefsCode ListDefsCode
    (43) ListDefsCode -> .
    (44) DefsCode -> . PAL PAL Fim :

    $end            reduce using rule 43 (ListDefsCode -> .)
    PAL             shift and go to state 61

    ListDefsCode                   shift and go to state 59
    DefsCode                       shift and go to state 60

state 49

    (13) Erro -> - PAL SIMB . , PAL Fim )

    ,               shift and go to state 62


state 50

    (12) Def -> SIMB PAL { TOKEN . , PAL Fim }

    ,               shift and go to state 63


state 51

    (6) Tokens -> % PAL = . ListTokens
    (7) ListTokens -> . [ TOKEN ListTokens ]
    (8) ListTokens -> . , TOKEN
    (9) ListTokens -> .

    [               shift and go to state 65
    ,               shift and go to state 66
    SIMB            reduce using rule 9 (ListTokens -> .)
    -               reduce using rule 9 (ListTokens -> .)

    ListTokens                     shift and go to state 64

state 52

    (5) Ignore -> % PAL = SIMB .

    %               reduce using rule 5 (Ignore -> % PAL = SIMB .)


state 53

    (15) Precedence -> % PAL = [ ListPrecedence . ]

    ]               shift and go to state 67


state 54

    (16) ListPrecedence -> PRECEDENCE . , ListPrecedence

    ,               shift and go to state 68


state 55

    (21) Exp -> PAL Exp .

    {               reduce using rule 21 (Exp -> PAL Exp .)


state 56

    (20) Productions -> PAL : Exp { . Id }
    (25) Id -> . Atr Math ListAtr Fim
    (26) Atr -> . PAL [ Atr ]
    (27) Atr -> . PAL

    PAL             shift and go to state 69

    Id                             shift and go to state 70
    Atr                            shift and go to state 71

state 57

    (22) Exp -> TOKEN Exp .

    {               reduce using rule 22 (Exp -> TOKEN Exp .)


state 58

    (23) Exp -> % PAL . Exp
    (21) Exp -> . PAL Exp
    (22) Exp -> . TOKEN Exp
    (23) Exp -> . % PAL Exp
    (24) Exp -> .

    PAL             shift and go to state 44
    TOKEN           shift and go to state 46
    %               shift and go to state 47
    {               reduce using rule 24 (Exp -> .)

    Exp                            shift and go to state 72

state 59

    (41) Code -> % % ListDefsCode .

    $end            reduce using rule 41 (Code -> % % ListDefsCode .)


state 60

    (42) ListDefsCode -> DefsCode . ListDefsCode
    (42) ListDefsCode -> . DefsCode ListDefsCode
    (43) ListDefsCode -> .
    (44) DefsCode -> . PAL PAL Fim :

    $end            reduce using rule 43 (ListDefsCode -> .)
    PAL             shift and go to state 61

    DefsCode                       shift and go to state 60
    ListDefsCode                   shift and go to state 73

state 61

    (44) DefsCode -> PAL . PAL Fim :

    PAL             shift and go to state 74


state 62

    (13) Erro -> - PAL SIMB , . PAL Fim )

    PAL             shift and go to state 75


state 63

    (12) Def -> SIMB PAL { TOKEN , . PAL Fim }

    PAL             shift and go to state 76


state 64

    (6) Tokens -> % PAL = ListTokens .

    SIMB            reduce using rule 6 (Tokens -> % PAL = ListTokens .)
    -               reduce using rule 6 (Tokens -> % PAL = ListTokens .)


state 65

    (7) ListTokens -> [ . TOKEN ListTokens ]

    TOKEN           shift and go to state 77


state 66

    (8) ListTokens -> , . TOKEN

    TOKEN           shift and go to state 78


state 67

    (15) Precedence -> % PAL = [ ListPrecedence ] .

    PAL             reduce using rule 15 (Precedence -> % PAL = [ ListPrecedence ] .)
    %               reduce using rule 15 (Precedence -> % PAL = [ ListPrecedence ] .)


state 68

    (16) ListPrecedence -> PRECEDENCE , . ListPrecedence
    (16) ListPrecedence -> . PRECEDENCE , ListPrecedence
    (17) ListPrecedence -> .

    PRECEDENCE      shift and go to state 54
    ]               reduce using rule 17 (ListPrecedence -> .)

    ListPrecedence                 shift and go to state 79

state 69

    (26) Atr -> PAL . [ Atr ]
    (27) Atr -> PAL .

    [               shift and go to state 80
    =               reduce using rule 27 (Atr -> PAL .)
    +               reduce using rule 27 (Atr -> PAL .)
    -               reduce using rule 27 (Atr -> PAL .)
    *               reduce using rule 27 (Atr -> PAL .)
    /               reduce using rule 27 (Atr -> PAL .)
    _               reduce using rule 27 (Atr -> PAL .)
    PAL             reduce using rule 27 (Atr -> PAL .)
    )               reduce using rule 27 (Atr -> PAL .)
    }               reduce using rule 27 (Atr -> PAL .)
    ]               reduce using rule 27 (Atr -> PAL .)


state 70

    (20) Productions -> PAL : Exp { Id . }

    }               shift and go to state 81


state 71

    (25) Id -> Atr . Math ListAtr Fim
    (32) Math -> . =
    (33) Math -> . +
    (34) Math -> . -
    (35) Math -> . *
    (36) Math -> . /
    (37) Math -> . _
    (38) Math -> . = +
    (39) Math -> . = -
    (40) Math -> .

    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    _               shift and go to state 88
    PAL             reduce using rule 40 (Math -> .)
    )               reduce using rule 40 (Math -> .)
    }               reduce using rule 40 (Math -> .)

    Math                           shift and go to state 82

state 72

    (23) Exp -> % PAL Exp .

    {               reduce using rule 23 (Exp -> % PAL Exp .)


state 73

    (42) ListDefsCode -> DefsCode ListDefsCode .

    $end            reduce using rule 42 (ListDefsCode -> DefsCode ListDefsCode .)


state 74

    (44) DefsCode -> PAL PAL . Fim :
    (30) Fim -> . )
    (31) Fim -> .

    )               shift and go to state 90
    :               reduce using rule 31 (Fim -> .)

    Fim                            shift and go to state 89

state 75

    (13) Erro -> - PAL SIMB , PAL . Fim )
    (30) Fim -> . )
    (31) Fim -> .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 90

  ! )               [ reduce using rule 31 (Fim -> .) ]

    Fim                            shift and go to state 91

state 76

    (12) Def -> SIMB PAL { TOKEN , PAL . Fim }
    (30) Fim -> . )
    (31) Fim -> .

    )               shift and go to state 90
    }               reduce using rule 31 (Fim -> .)

    Fim                            shift and go to state 92

state 77

    (7) ListTokens -> [ TOKEN . ListTokens ]
    (7) ListTokens -> . [ TOKEN ListTokens ]
    (8) ListTokens -> . , TOKEN
    (9) ListTokens -> .

    [               shift and go to state 65
    ,               shift and go to state 66
    ]               reduce using rule 9 (ListTokens -> .)

    ListTokens                     shift and go to state 93

state 78

    (8) ListTokens -> , TOKEN .

    SIMB            reduce using rule 8 (ListTokens -> , TOKEN .)
    -               reduce using rule 8 (ListTokens -> , TOKEN .)
    ]               reduce using rule 8 (ListTokens -> , TOKEN .)


state 79

    (16) ListPrecedence -> PRECEDENCE , ListPrecedence .

    ]               reduce using rule 16 (ListPrecedence -> PRECEDENCE , ListPrecedence .)


state 80

    (26) Atr -> PAL [ . Atr ]
    (26) Atr -> . PAL [ Atr ]
    (27) Atr -> . PAL

    PAL             shift and go to state 69

    Atr                            shift and go to state 94

state 81

    (20) Productions -> PAL : Exp { Id } .

    PAL             reduce using rule 20 (Productions -> PAL : Exp { Id } .)
    %               reduce using rule 20 (Productions -> PAL : Exp { Id } .)


state 82

    (25) Id -> Atr Math . ListAtr Fim
    (28) ListAtr -> . Atr Math ListAtr
    (29) ListAtr -> .
    (26) Atr -> . PAL [ Atr ]
    (27) Atr -> . PAL

    )               reduce using rule 29 (ListAtr -> .)
    }               reduce using rule 29 (ListAtr -> .)
    PAL             shift and go to state 69

    Atr                            shift and go to state 95
    ListAtr                        shift and go to state 96

state 83

    (32) Math -> = .
    (38) Math -> = . +
    (39) Math -> = . -

    PAL             reduce using rule 32 (Math -> = .)
    )               reduce using rule 32 (Math -> = .)
    }               reduce using rule 32 (Math -> = .)
    +               shift and go to state 97
    -               shift and go to state 98


state 84

    (33) Math -> + .

    PAL             reduce using rule 33 (Math -> + .)
    )               reduce using rule 33 (Math -> + .)
    }               reduce using rule 33 (Math -> + .)


state 85

    (34) Math -> - .

    PAL             reduce using rule 34 (Math -> - .)
    )               reduce using rule 34 (Math -> - .)
    }               reduce using rule 34 (Math -> - .)


state 86

    (35) Math -> * .

    PAL             reduce using rule 35 (Math -> * .)
    )               reduce using rule 35 (Math -> * .)
    }               reduce using rule 35 (Math -> * .)


state 87

    (36) Math -> / .

    PAL             reduce using rule 36 (Math -> / .)
    )               reduce using rule 36 (Math -> / .)
    }               reduce using rule 36 (Math -> / .)


state 88

    (37) Math -> _ .

    PAL             reduce using rule 37 (Math -> _ .)
    )               reduce using rule 37 (Math -> _ .)
    }               reduce using rule 37 (Math -> _ .)


state 89

    (44) DefsCode -> PAL PAL Fim . :

    :               shift and go to state 99


state 90

    (30) Fim -> ) .

    :               reduce using rule 30 (Fim -> ) .)
    )               reduce using rule 30 (Fim -> ) .)
    }               reduce using rule 30 (Fim -> ) .)


state 91

    (13) Erro -> - PAL SIMB , PAL Fim . )

    )               shift and go to state 100


state 92

    (12) Def -> SIMB PAL { TOKEN , PAL Fim . }

    }               shift and go to state 101


state 93

    (7) ListTokens -> [ TOKEN ListTokens . ]

    ]               shift and go to state 102


state 94

    (26) Atr -> PAL [ Atr . ]

    ]               shift and go to state 103


state 95

    (28) ListAtr -> Atr . Math ListAtr
    (32) Math -> . =
    (33) Math -> . +
    (34) Math -> . -
    (35) Math -> . *
    (36) Math -> . /
    (37) Math -> . _
    (38) Math -> . = +
    (39) Math -> . = -
    (40) Math -> .

    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    _               shift and go to state 88
    PAL             reduce using rule 40 (Math -> .)
    )               reduce using rule 40 (Math -> .)
    }               reduce using rule 40 (Math -> .)

    Math                           shift and go to state 104

state 96

    (25) Id -> Atr Math ListAtr . Fim
    (30) Fim -> . )
    (31) Fim -> .

    )               shift and go to state 90
    }               reduce using rule 31 (Fim -> .)

    Fim                            shift and go to state 105

state 97

    (38) Math -> = + .

    PAL             reduce using rule 38 (Math -> = + .)
    )               reduce using rule 38 (Math -> = + .)
    }               reduce using rule 38 (Math -> = + .)


state 98

    (39) Math -> = - .

    PAL             reduce using rule 39 (Math -> = - .)
    )               reduce using rule 39 (Math -> = - .)
    }               reduce using rule 39 (Math -> = - .)


state 99

    (44) DefsCode -> PAL PAL Fim : .

    PAL             reduce using rule 44 (DefsCode -> PAL PAL Fim : .)
    $end            reduce using rule 44 (DefsCode -> PAL PAL Fim : .)


state 100

    (13) Erro -> - PAL SIMB , PAL Fim ) .

    %               reduce using rule 13 (Erro -> - PAL SIMB , PAL Fim ) .)


state 101

    (12) Def -> SIMB PAL { TOKEN , PAL Fim } .

    SIMB            reduce using rule 12 (Def -> SIMB PAL { TOKEN , PAL Fim } .)
    -               reduce using rule 12 (Def -> SIMB PAL { TOKEN , PAL Fim } .)


state 102

    (7) ListTokens -> [ TOKEN ListTokens ] .

    SIMB            reduce using rule 7 (ListTokens -> [ TOKEN ListTokens ] .)
    -               reduce using rule 7 (ListTokens -> [ TOKEN ListTokens ] .)
    ]               reduce using rule 7 (ListTokens -> [ TOKEN ListTokens ] .)


state 103

    (26) Atr -> PAL [ Atr ] .

    =               reduce using rule 26 (Atr -> PAL [ Atr ] .)
    +               reduce using rule 26 (Atr -> PAL [ Atr ] .)
    -               reduce using rule 26 (Atr -> PAL [ Atr ] .)
    *               reduce using rule 26 (Atr -> PAL [ Atr ] .)
    /               reduce using rule 26 (Atr -> PAL [ Atr ] .)
    _               reduce using rule 26 (Atr -> PAL [ Atr ] .)
    PAL             reduce using rule 26 (Atr -> PAL [ Atr ] .)
    )               reduce using rule 26 (Atr -> PAL [ Atr ] .)
    }               reduce using rule 26 (Atr -> PAL [ Atr ] .)
    ]               reduce using rule 26 (Atr -> PAL [ Atr ] .)


state 104

    (28) ListAtr -> Atr Math . ListAtr
    (28) ListAtr -> . Atr Math ListAtr
    (29) ListAtr -> .
    (26) Atr -> . PAL [ Atr ]
    (27) Atr -> . PAL

    )               reduce using rule 29 (ListAtr -> .)
    }               reduce using rule 29 (ListAtr -> .)
    PAL             shift and go to state 69

    Atr                            shift and go to state 95
    ListAtr                        shift and go to state 106

state 105

    (25) Id -> Atr Math ListAtr Fim .

    }               reduce using rule 25 (Id -> Atr Math ListAtr Fim .)


state 106

    (28) ListAtr -> Atr Math ListAtr .

    )               reduce using rule 28 (ListAtr -> Atr Math ListAtr .)
    }               reduce using rule 28 (ListAtr -> Atr Math ListAtr .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ) in state 75 resolved as shift
